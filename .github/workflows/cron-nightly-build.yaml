name: SPT.Launcher Build Nightly

on:
  schedule:
    - cron: "0 3 * * *"
  push:
    paths:
      - '.github/workflows/cron-nightly-build.yaml'

env:
  NIGHTLY_BRANCH_SERVER: 4.0.x-DEV

  SERVER_URL: https://github.com
  REPOSITORY_OWNER: sp-tarkov
  REPOSITORY_MODULES: modules
  REPOSITORY_LAUNCHER: launcher
  REPOSITORY_SERVER: AirryCo/spt-server

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      PROCEED: ${{ steps.get-latest-commit.outputs.PROCEED }}
      NIGHTLY_BRANCH_MODULES: ${{ steps.get-latest-commit.outputs.NIGHTLY_BRANCH_MODULES }}
      MODULES_LAST_BUILT_HASH: ${{ steps.get-latest-commit.outputs.MODULES_LAST_BUILT_HASH }}
      NIGHTLY_BRANCH_LAUNCHER: ${{ steps.get-latest-commit.outputs.NIGHTLY_BRANCH_LAUNCHER }}
      LAUNCHER_LAST_BUILT_HASH: ${{ steps.get-latest-commit.outputs.LAUNCHER_LAST_BUILT_HASH }}
      
      SPT_VERSION: ${{ steps.versions.outputs.SPT_VERSION }}
      EFT_VERSION: ${{ steps.versions.outputs.EFT_VERSION }}
      SERVER_COMMIT_LINUX: ${{ steps.versions.outputs.SERVER_COMMIT_LINUX }}
      SERVER_COMMIT_WINDOWS: ${{ steps.versions.outputs.SERVER_COMMIT_WINDOWS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Latest Commit From SPT
        id: get-latest-commit
        run: |
          git pull
          source trigger.nightly
          branch_name_modules=$(git ls-remote --heads ${{ env.SERVER_URL }}/${{ env.REPOSITORY_OWNER }}/${{ env.REPOSITORY_MODULES }}.git | grep -o 'refs/heads/4.0.0-DEV' | sed 's|refs/heads/||' | head -n 1)
          MODULES_LATEST_COMMIT_HASH=$(git ls-remote ${{ env.SERVER_URL }}/${{ env.REPOSITORY_OWNER }}/${{ env.REPOSITORY_MODULES }}.git refs/heads/$branch_name_modules | awk '{print $1}')
          modules_last_commit=${modules:0:7}
          modules_latest_commit=${MODULES_LATEST_COMMIT_HASH:0:7}

          branch_name_launcher=$(git ls-remote --heads ${{ env.SERVER_URL }}/${{ env.REPOSITORY_OWNER }}/${{ env.REPOSITORY_LAUNCHER }}.git | grep -o 'refs/heads/4.0.0-DEV' | sed 's|refs/heads/||' | head -n 1)

          echo "ðŸ‘½ NIGHTLY_BRANCH_MODULES = $branch_name_modules"
          echo "NIGHTLY_BRANCH_MODULES=$branch_name_modules" >> $GITHUB_OUTPUT
          echo "ðŸ‘½ NIGHTLY_BRANCH_LAUNCHER = $branch_name_launcher"
          echo "NIGHTLY_BRANCH_LAUNCHER=$branch_name_launcher" >> $GITHUB_OUTPUT
          echo "ðŸ¤– modules_last_commit = $modules_last_commit"
          echo "ðŸ‘½ MODULES_LATEST_COMMIT_HASH = $MODULES_LATEST_COMMIT_HASH"
          echo "MODULES_LAST_BUILT_HASH=$modules" >> $GITHUB_OUTPUT
          echo "LAUNCHER_LAST_BUILT_HASH=$launcher" >> $GITHUB_OUTPUT

          if [ "$modules_last_commit" = "$modules_latest_commit" ]; then
            LAUNCHER_LATEST_COMMIT_HASH=$(git ls-remote ${{ env.SERVER_URL }}/${{ env.REPOSITORY_OWNER }}/${{ env.REPOSITORY_LAUNCHER }}.git refs/heads/$branch_name_launcher | awk '{print $1}')
            launcher_last_commit=${launcher:0:7}
            launcher_latest_commit="${LAUNCHER_LATEST_COMMIT_HASH:0:7}"

            echo "ðŸ¤– launcher_last_commit = $launcher_last_commit"
            echo "ðŸ‘½ LAUNCHER_LATEST_COMMIT_HASH = $LAUNCHER_LATEST_COMMIT_HASH"

            if [ "$launcher_last_commit" != "$launcher_latest_commit" ]; then
              echo "âœ… There is different between built-commit and latest-commit, continue to build."
              echo "PROCEED=true" >> $GITHUB_OUTPUT
            else
              echo "âœ‹ There is no different between built-commit and latest-commit, stop building."
              echo "PROCEED=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "âœ… There is different between built-commit and latest-commit, continue to build."
            echo "PROCEED=true" >> $GITHUB_OUTPUT
          fi

      - name: Extract versions
        id: versions
        if: steps.get-latest-commit.outputs.PROCEED == 'true'
        run: |
          SERVER_COMMIT_LINUX=$(git ls-remote ${{ env.SERVER_URL }}/${{ env.REPOSITORY_SERVER }}.git refs/heads/${{ env.NIGHTLY_BRANCH_SERVER }} | awk '{print $1}' | cut -c1-8)
          SERVER_COMMIT_WINDOWS=$(git ls-remote ${{ env.SERVER_URL }}/${{ env.REPOSITORY_SERVER }}.git refs/heads/${{ env.NIGHTLY_BRANCH_SERVER }}_windows | awk '{print $1}' | cut -c1-8)

          # Extract versions from core.json
          wget https://raw.githubusercontent.com//${{ env.REPOSITORY_SERVER }}/refs/heads/${{ env.NIGHTLY_BRANCH_SERVER }}/project/assets/configs/core.json
          SPT_VERSION=$(jq -r '.sptVersion' core.json)
          EFT_VERSION=$(jq -r '.compatibleTarkovVersion' core.json)

          echo "ðŸ‘½ SPT_VERSION = $SPT_VERSION"
          echo "ðŸ‘½ EFT_VERSION = $EFT_VERSION"
          echo "ðŸ‘½ SERVER_COMMIT_LINUX = $SERVER_COMMIT_LINUX"
          echo "ðŸ‘½ SERVER_COMMIT_WINDOWS = $SERVER_COMMIT_WINDOWS"
          echo "SPT_VERSION=$SPT_VERSION" >> $GITHUB_OUTPUT
          echo "EFT_VERSION=$EFT_VERSION" >> $GITHUB_OUTPUT
          echo "SERVER_COMMIT_LINUX=$SERVER_COMMIT_LINUX" >> $GITHUB_OUTPUT
          echo "SERVER_COMMIT_WINDOWS=$SERVER_COMMIT_WINDOWS" >> $GITHUB_OUTPUT

  build-modules:
    needs: prepare
    if: needs.prepare.outputs.PROCEED == 'true'
    runs-on: N5105
    container:
      image: dev.sp-tarkov.com/medusa/spt-build:dotnet
      volumes:
        - act-toolcache:/opt/hostedtoolcache
        - escapefromtarkov:/escapefromtarkov
    outputs:
      JOB_STATUS: ${{ steps.status.outputs.JOB_STATUS }}
      MODULES_LATEST_BUILT_HASH: ${{ steps.status.outputs.MODULES_LATEST_BUILT_HASH }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x
      - name: Clone Modules
        id: clone-modules
        run: |
          git pull
          git clone --depth=1 -b ${{ needs.prepare.outputs.NIGHTLY_BRANCH_MODULES }} ${{ env.SERVER_URL }}/${{ env.REPOSITORY_OWNER }}/${{ env.REPOSITORY_MODULES }}.git
          cd ${{ env.REPOSITORY_MODULES }}
          COMMIT_ID=$(git rev-parse --short HEAD)
          echo "ðŸ‘½ COMMIT_ID = $COMMIT_ID"
          echo "COMMIT_ID=$COMMIT_ID" >> $GITHUB_OUTPUT
      - name: Decompress Client Module Package
        run: |
          workspace=$(pwd)
          if [ ! -d /escapefromtarkov ]; then
            mkdir -p /escapefromtarkov
          fi
          cd /escapefromtarkov
          if [ ! -f Managed-${{ needs.prepare.outputs.EFT_VERSION }}.tar ]; then
            wget -q ${{ secrets.MANAGED_DOWNLOAD_URL }}/Managed-${{ needs.prepare.outputs.EFT_VERSION }}.tar
          fi
          tar -xf Managed-${{ needs.prepare.outputs.EFT_VERSION }}.tar -C $workspace/${{ env.REPOSITORY_MODULES }}/project/Shared/
      - name: Cache Modules Build
        uses: actions/cache@v4
        id: cache-modules-build
        with:
          path: |
            ${{ env.REPOSITORY_MODULES }}/project/Build
          key: modules-build-${{ steps.clone-modules.outputs.COMMIT_ID }}
      - name: Build Modules
        if: steps.cache-modules-build.outputs.cache-hit != 'true'
        run: |
          cd ${{ env.REPOSITORY_MODULES }}/project
          dotnet restore
          dotnet build
          printf "\nðŸ‘½ Built success!\n\n"
          tree Build

      - name: Artifact Modules
        uses: actions/upload-artifact@v4
        with:
          name: modules-artifact
          path: ${{ env.REPOSITORY_MODULES }}/project/Build
          compression-level: 0
          retention-days: 1
          overwrite: true

      - name: Generate status
        id: status
        run: |
          echo "JOB_STATUS = ok"
          echo "JOB_STATUS=ok" >> $GITHUB_OUTPUT
          echo "MODULES_LATEST_BUILT_HASH=${{ steps.clone-modules.outputs.COMMIT_ID }}" >> $GITHUB_OUTPUT

  build-launcher:
    needs: prepare
    if: ${{ needs.prepare.outputs.PROCEED == 'true' }}
    runs-on: N5105
    container:
      image: dev.sp-tarkov.com/medusa/spt-build:dotnet
    outputs:
      JOB_STATUS: ${{ steps.status.outputs.JOB_STATUS }}
      LAUNCHER_LATEST_BUILT_HASH: ${{ steps.status.outputs.LAUNCHER_LATEST_BUILT_HASH }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x
      - name: Clone Launcher
        id: clone-launcher
        run: |
          git pull
          git clone --depth=1 -b ${{ needs.prepare.outputs.NIGHTLY_BRANCH_LAUNCHER }} ${{ env.SERVER_URL }}/${{ env.REPOSITORY_OWNER }}/${{ env.REPOSITORY_LAUNCHER }}.git
          cd ${{ env.REPOSITORY_LAUNCHER }}
          COMMIT_ID=$(git rev-parse --short HEAD)
          echo "ðŸ‘½ COMMIT_ID = $COMMIT_ID"
          echo "COMMIT_ID=$COMMIT_ID" >> $GITHUB_OUTPUT
      - name: Cache Launcher Build
        uses: actions/cache@v4
        id: cache-launcher-build
        with:
          path: |
            ${{ env.REPOSITORY_LAUNCHER }}/project/Build
          key: launcher-build-${{ steps.clone-launcher.outputs.COMMIT_ID }}
      - name: Build Launcher
        if: steps.cache-launcher-build.outputs.cache-hit != 'true'
        run: |
          cd ${{ env.REPOSITORY_LAUNCHER }}/project
          dotnet build
          printf "\nðŸ‘½ Built!\n\n"
          tree Build

      - name: Artifact Launcher
        uses: actions/upload-artifact@v4
        with:
          name: launcher-artifact
          path: ${{ env.REPOSITORY_LAUNCHER }}/project/Build
          compression-level: 0
          retention-days: 1
          overwrite: true

      - name: Generate status
        id: status
        run: |
          echo "JOB_STATUS = ok"
          echo "JOB_STATUS=ok" >> $GITHUB_OUTPUT
          echo "LAUNCHER_LATEST_BUILT_HASH=${{ steps.clone-launcher.outputs.COMMIT_ID }}" >> $GITHUB_OUTPUT

  update-trigger-and-push:
    needs: [prepare, build-modules, build-launcher]
    runs-on: ubuntu-latest
    if: needs.build-modules.outputs.JOB_STATUS == 'ok' && needs.build-launcher.outputs.JOB_STATUS == 'ok'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Update Trigger And Push To GitHub
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "bot@stblog.com.cn"
          git pull
          rm trigger.nightly
          modules=${{ needs.build-modules.outputs.MODULES_LATEST_BUILT_HASH }}
          launcher=${{ needs.build-launcher.outputs.LAUNCHER_LATEST_BUILT_HASH }}
          echo "modules=$modules" > trigger.nightly
          echo "launcher=$launcher" >> trigger.nightly
          git add trigger.nightly
          git commit -m "ðŸ¤– up to modules: \`$modules\`, launcher: \`$launcher\`."
          git push
        shell: bash

  assemble-and-publish:
    needs: [prepare, build-modules, build-launcher]
    runs-on: ubuntu-latest
    steps:
      - name: Clone Build Project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clean Directory
        run: |
          rm -rf release build
          mkdir -p release
        shell: bash

      - name: Download Modules Artifact
        uses: actions/download-artifact@v4
        with:
          name: modules-artifact
          path: release/

      - name: Download Launcher Artifact
        uses: actions/download-artifact@v4
        with:
          name: launcher-artifact
          path: release/

      - name: Merge Static Assets and Dynamic Files
        run: cp -rvf static-assets/* release/
        shell: bash

      - name: List Release Contents
        run: |
          apt-get update && apt-get install -y -qq tree
          tree release
        shell: bash

      - name: Generate Release Filename
        id: generate-filename
        run: |
          SPT_VERSION=${{ needs.prepare.outputs.SPT_VERSION }}
          EFT_VERSION=${{ needs.prepare.outputs.EFT_VERSION }}
          SERVER_COMMIT_LINUX=${{ needs.prepare.outputs.SERVER_COMMIT_LINUX }}
          DATE_TIME=$(date +%Y%m%d%H%M%S)

          release_name="spt-launcher-${SPT_VERSION}-Nightly-EFT${EFT_VERSION}-${SERVER_COMMIT_LINUX}-${DATE_TIME}"
          echo "DATE_TIME=$DATE_TIME" >> $GITHUB_OUTPUT
          echo "release_name=$release_name" >> $GITHUB_OUTPUT
          echo "release_file=$release_name.zip" >> $GITHUB_OUTPUT
        shell: bash

      - name: Artifact Release
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.generate-filename.outputs.release_name }}
          path: release
          retention-days: 1
          overwrite: true

      - name: Compress Release
        id: compress-release
        run: |
          cd release
          zip -r ../${{ steps.generate-filename.outputs.release_name }}.zip *
          echo "Release compressed as ${{ steps.generate-filename.outputs.release_file }}."
          ls -lh
        shell: bash

      - name: Create Github Pre-release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.generate-filename.outputs.DATE_TIME }}
          tag_name: ${{ steps.generate-filename.outputs.DATE_TIME }}
          prerelease: true
          body: |
            ${{ steps.generate-filename.outputs.release_name }}

            SPT: ***${{ needs.prepare.outputs.SPT_VERSION }}***

            Tarkov: ***${{ needs.prepare.outputs.EFT_VERSION }}***

            Build time: ***${{ steps.generate-filename.outputs.DATE_TIME }}***

            Commit hash:
              - modules: [${{ needs.build-modules.outputs.MODULES_LATEST_BUILT_HASH }}](${{ env.SERVER_URL }}/${{ env.REPOSITORY_OWNER }}/${{ env.REPOSITORY_MODULES }}/tree/${{ needs.build-modules.outputs.MODULES_LATEST_BUILT_HASH }})
              - launcher: [${{ needs.build-launcher.outputs.LAUNCHER_LATEST_BUILT_HASH }}](${{ env.SERVER_URL }}/${{ env.REPOSITORY_OWNER }}/${{ env.REPOSITORY_LAUNCHER }}/tree/${{ needs.build-launcher.outputs.LAUNCHER_LATEST_BUILT_HASH }})

            > [!WARNING]
            > After downloading, please use extraction software like WinRAR or [7-Zip](https://www.7-zip.org/) to unzip the files, then copy them to the Tarkov root directory. Do not use Windows File Explorer to directly open and copy the files.

            **SPT.Server Download Page**:

            ${{ github.server_url }}/AirryCo/spt-server-ci/releases

            **Docker Supported for SPT.Server** (linux/amd64 only):

            ```bash
            docker pull stblog/spt-server:nightly
            docker pull ghcr.io/airryco/spt-server:nightly
            docker pull registry.cn-shenzhen.aliyuncs.com/spt-server/spt-server:nightly
            ```

            Fika-Server built-in:

            ```bash
            docker pull stblog/spt-server:nightly-fika
            docker pull ghcr.io/airryco/spt-server:nightly-fika
            docker pull registry.cn-shenzhen.aliyuncs.com/spt-server/spt-server:nightly-fika
            ```

            Full Changelog:
              - modules: [${{ needs.prepare.outputs.MODULES_LAST_BUILT_HASH }}....${{ needs.build-modules.outputs.MODULES_LATEST_BUILT_HASH }}](${{ env.SERVER_URL }}/${{ env.REPOSITORY_OWNER }}/${{ env.REPOSITORY_MODULES }}/compare/${{ needs.prepare.outputs.MODULES_LAST_BUILT_HASH }}...${{ needs.build-modules.outputs.MODULES_LATEST_BUILT_HASH }})
              - launcher: [${{ needs.prepare.outputs.LAUNCHER_LAST_BUILT_HASH }}....${{ needs.build-launcher.outputs.LAUNCHER_LATEST_BUILT_HASH }}](${{ env.SERVER_URL }}/${{ env.REPOSITORY_OWNER }}/${{ env.REPOSITORY_LAUNCHER }}/compare/${{ needs.prepare.outputs.LAUNCHER_LAST_BUILT_HASH }}...${{ needs.build-launcher.outputs.LAUNCHER_LATEST_BUILT_HASH }})

          files: |
            ${{ steps.generate-filename.outputs.release_file }}
